worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {

    # 设置默认 lua 搜索路径, 添加 lua 路径 其中";;"表示默认搜索路径, 默认到 /usr/local/openresty/nginx 下找
    lua_package_path 'lua/?.lua;/tmp/work/lua/?.lua;;';
    lua_package_cpath "/tmp/work/lualib/?.so;;";   #c模块

    # 默认情况下 lua_code_cache 是开启的, 即缓存 lua 代码, 即每次 lua 代码变更必须 reload nginx 才生效,
    # 如果在开发阶段可以通过 lua_code_cache off; 关闭缓存, 这样调试时每次修改 lua 代码不需要 reload nginx;
    # 但是正式环境一定记得开启缓存.
    lua_code_cache off;

    server {
        listen 8080;
        server_name  localhost;
        root    html;



        #并行计算
        location = /sum {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /subduction {
            internal;
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test {
            content_by_lua_block {
                local res1, res2 = ngx.location.capture_multi( {
                                {"/sum", {args={a=3, b=8}}},
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
            }
        }

        #流水线方式跳转
        location ~ ^/static/([-_a-zA-Z0-9/]+).png {
            set $image_name $1;
            content_by_lua '
                ngx.exec("/download_internal/images/"
                        .. ngx.var.image_name .. ".png");
            ';
        }
        location /download_internal {
            # 这里还可以有其他统一的 download 下载设置，例如限速等
            alias ../download;
        }

        #外部重定向
        location = /foo {
            content_by_lua_block {
                ngx.say([[i'm foo]])
            }
        }

        location = /app/test1 {
            rewrite_by_lua_block {
                return ngx.redirect('/foo');
            }
        }

        #解析参数
        location /test {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                    ngx.say("[GET]  key:", k, " v:", v)
                end

                ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
                local arg = ngx.req.get_post_args()
                for k,v in pairs(arg) do
                    ngx.say("[POST] key:", k, " v:", v)
                end
            }
        }

        location /test2 {
            content_by_lua_block {
                local res = ngx.location.capture(
                        '/test',
                        {
                            method = ngx.HTTP_POST,
                            args = ngx.encode_args{a=1, b='2&'},
                            body = ngx.encode_args{c=3, d='4&'}
                        }
                    )

                #local res = ngx.location.capture('/test',
                #        {
                #            method = ngx.HTTP_POST,
                #            args = 'a=1&b=2%26',  -- 注意这里的 %26 ,代表的是 & 字符
                #            body = 'c=3&d=4%26'
                #        }
                #    )
                ngx.say(res.body)

            }
        }

        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            access_by_lua_file  lua/access_check.lua;
            content_by_lua_file lua/$1.lua;
        }

        location /myaddr {
            default_type   text/html;
            content_by_lua_file lua/client.lua;
        }

        #默认
        location / {
            default_type text/html;
            content_by_lua ' ngx.say("<p>hello, world</p>") ';
        }
    }
}
